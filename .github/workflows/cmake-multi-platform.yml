name: Cmake build application

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master

jobs:
    build:
        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v2

            - name: Set up CMake
              uses: cmake-actions/setup-cmake@v1
              with:
                  cmake-version: "3.25"

          # Cache dependencies installed by a package manager, e.g., apt-get
            - name: Cache dependencies
              uses: actions/cache@v2
              with:
                  path: |
                      path/to/dependencies
                  key: ${{ runner.os }}-deps-${{ hashFiles('**/CMakeLists.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-deps-

            # Install dependencies in per platform (currently only macOS)
            - name: Install dependencies
              run: |
                if [ ${{ matrix.os }} == 'macos-latest' ]; then
                      brew install qt  
                fi

            - name: Build
              matrix: # Set the strategy matrix to build on multiple platforms
                os: [macos-latest]
                build_type: [Debug]
                c_compiler: [clang]
                cpp_compiler: [clang++]

                include:
                    - os: macos-latest
                      build_type: Debug
                      c_compiler: clang
                      cpp_compiler: clang++
                      env:
                          - MATRIX_EVAL="CC=clang && CXX=clang++"
            - uses: actions/checkout@v3
                  
            - name: Set reusable strings
                # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
              id: strings
              shell: bash
              run: |
                  echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

            - name: Configure CMake
                # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
                # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
              run: >
                  cmake -B ${{ steps.strings.outputs.build-output-dir }}
                  -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
                  -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  -S ${{ github.workspace }}
                  
            - name: Build
                # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
              run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
